{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;AAAA,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAC3B,8DAA8B;AAC9B,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;AACtB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AACtC,iDAA8F;AAE9F,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AAE3C,CAAC,GAAS,EAAE;IACV,IAAI;QAGF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,uBAAY,EAAE,CAAA;QAGrC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,MAAM,0BAAe,CAAC,IAAI,CAAC,CAAA;YAE9C,IAAI,UAAU,EAAE;gBACd,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,CAAA;aAC3E;iBAAM;gBACL,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,+EAA+E,EAAE,CAAC,CAAA;aACvH;QACH,CAAC,CAAA,CAAC,CAAA;QAEF,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;YAC9B,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,GAAa,CAAC;YAE5C,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,eAAe,GAAG;gBAC1C,MAAM,sBAAsB,GAAG,MAAM,oCAAyB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;gBACjF,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAA;aACjC;iBAAM;gBACL,GAAG,CAAC,IAAI,CAAC;oBACP,OAAO,EAAE,iEAAiE;iBAC3E,CAAC,CAAA;aACH;QACH,CAAC,CAAA,CAAC,CAAA;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QACjC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAEhB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;YAC9B,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,mBAAmB;gBAC5B,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;aAC1C,CAAC,CAAA;QACJ,CAAC,CAAA,CAAC,CAAA;KACH;IAED,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,6CAA6C,IAAI,GAAG,CAAC,CAAC,CAAA;AAE3F,CAAC,CAAA,CAAC,EAAE,CAAA","sourcesContent":["require('dotenv').config();\nimport express from 'express';\nconst app = express();\nconst port = process.env.PORT || 3000;\nimport { getLinkedinProfileDetails, setupScraper, checkIfLoggedIn } from './scraper/linkedin';\n\nconsole.log(`Server setup: Setting up...`);\n\n(async () => {\n  try {\n    // Setup the headless browser before the requests, so we can re-use the Puppeteer session on each request\n    // Resulting in fast scrapes because we don't have to launch a headless browser anymore\n    const { page } = await setupScraper()\n\n    // An endpoint to determine if the scraper is still loggedin into LinkedIn\n    app.get('/status', async (req, res) => {\n      const isLoggedIn = await checkIfLoggedIn(page)\n\n      if (isLoggedIn) {\n        res.json({ status: 'success', message: 'Still logged in into LinkedIn.' })\n      } else {\n        res.json({ status: 'fail', message: 'We are logged out of LinkedIn, or our logged in check is not working anymore.' })\n      }\n    })\n\n    app.get('/', async (req, res) => {\n      const urlToScrape = req.query.url as string;\n\n      if (urlToScrape?.includes('linkedin.com/')) {\n        const linkedinProfileDetails = await getLinkedinProfileDetails(page, urlToScrape)\n        res.json(linkedinProfileDetails)\n      } else {\n        res.json({\n          message: 'Missing the url parameter. Or given URL is not an LinkedIn URL.'\n        })\n      }\n    })\n  } catch (err) {\n    console.log('Error during setup')\n    console.log(err)\n\n    app.get('/', async (req, res) => {\n      res.json({\n        message: 'An error occurred',\n        error: (err.message) ? err.message : null\n      })\n    })\n  }\n\n  app.listen(port, () => console.log(`Server setup: All done. Listening on port ${port}!`))\n\n})()\n"]}